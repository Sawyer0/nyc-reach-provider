{"version":3,"file":"static/js/987.b497d8d3.chunk.js","mappings":"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","sources":["services/providerService.js","hooks/useSearchForm.js","components/SearchForm.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst BASE_URL = process.env.REACT_APP_API_BASE_URL;\r\nconst MAPBOX_GEOCODING_URL = process.env.REACT_APP_MAPBOX_GEOCODING_URL;\r\nconst MAPBOX_TOKEN = process.env.REACT_APP_MAPBOX_ACCESS_TOKEN;\r\n\r\nexport const fetchProviders = async (searchAttribute, searchTerm) => {\r\n  try {\r\n    if (!BASE_URL || !MAPBOX_GEOCODING_URL || !MAPBOX_TOKEN) {\r\n      console.error('Missing environment variables');\r\n      throw new Error('Configuration error');\r\n    }\r\n\r\n    const params = {\r\n      $where: `practice_borough='${searchTerm}'`,\r\n      $limit: 5\r\n    };\r\n\r\n    console.log('Fetching with params:', params);\r\n    const response = await axios.get(BASE_URL, { params });\r\n\r\n    const providersWithCoordinates = await Promise.all(\r\n      response.data.map(async (provider) => {\r\n        try {\r\n          if (provider.practice_zip_code) {\r\n            const geocodeResponse = await axios.get(\r\n              `${MAPBOX_GEOCODING_URL}/${provider.practice_zip_code}.json`,\r\n              {\r\n                params: {\r\n                  access_token: MAPBOX_TOKEN,\r\n                  limit: 1,\r\n                  country: \"US\",\r\n                  types: \"postcode\",\r\n                  proximity: \"-73.935242,40.730610\"\r\n                }\r\n              }\r\n            );\r\n\r\n            if (\r\n              geocodeResponse.data.features &&\r\n              geocodeResponse.data.features.length > 0\r\n            ) {\r\n              const [lng, lat] = geocodeResponse.data.features[0].center;\r\n              return {\r\n                ...provider,\r\n                longitude: lng,\r\n                latitude: lat\r\n              };\r\n            }\r\n          }\r\n          return provider;\r\n        } catch (error) {\r\n          console.error('Geocoding error:', error);\r\n          return provider;\r\n        }\r\n      })\r\n    );\r\n\r\n    return providersWithCoordinates;\r\n  } catch (error) {\r\n    console.error('Error details:', error.response?.data || error);\r\n    throw error;\r\n  }\r\n};\r\n","import { useState } from \"react\";\r\nimport { fetchProviders } from \"../services/providerService\";\r\n\r\nconst useSearchForm = (setProviders, setIsSearchedSubmitted) => {\r\n    const [searchTerm, setSearchTerm] = useState(\"\");\r\n    const [searchAttribute, setSearchAttribute] = useState(\"practice_borough\");\r\n\r\n    const validAttributes = {\r\n        practice_borough: {\r\n            display: \"Borough\",\r\n            values: [\"Bronx\", \"Manhattan\", \"Brooklyn\", \"Queens\", \"Staten Island\"]\r\n        },\r\n        primary_specialty: {\r\n            display: \"Specialty\",\r\n            values: [\"Internal Medicine\", \"Family Medicine\", \"Pediatrics\", \"OB/GYN\", \"Cardiology\", \"Primary Care\"]\r\n        },\r\n        organization_type: {\r\n            display: \"Organization Type\",\r\n            values: [\"Small Practice\", \"Group Practice\", \"Hospital\", \"Community Health Center\"]\r\n        }\r\n    };\r\n\r\n    const handleAttributeChange = (newAttribute) => {\r\n        setSearchAttribute(newAttribute);\r\n        setSearchTerm(\"\");\r\n    };\r\n\r\n    const handleSearchChange = (value) => {\r\n        setSearchTerm(value);\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        if (!searchTerm) return;\r\n\r\n        try {\r\n            const providersData = await fetchProviders(searchAttribute, searchTerm);\r\n            setProviders(providersData || []);\r\n            setIsSearchedSubmitted(true);\r\n        } catch (error) {\r\n            console.error(\"Error fetching providers:\", error);\r\n            setProviders([]);\r\n        }\r\n    };\r\n\r\n    return {\r\n        searchTerm,\r\n        searchAttribute,\r\n        validAttributes,\r\n        handleAttributeChange,\r\n        handleSearchChange,\r\n        handleSubmit,\r\n    };\r\n};\r\n\r\nexport default useSearchForm;","import React from 'react';\r\nimport useSearchForm from '../hooks/useSearchForm';\r\nimport './SearchForm.css';\r\n\r\nconst SearchForm = ({ setProviders, setIsSearchSubmitted }) => {\r\n    const {\r\n        searchTerm,\r\n        searchAttribute,\r\n        validAttributes,\r\n        handleAttributeChange,\r\n        handleSearchChange,\r\n        handleSubmit,\r\n    } = useSearchForm(setProviders, setIsSearchSubmitted);\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit} className=\"search-form\">\r\n            <select \r\n                value={searchAttribute}\r\n                onChange={(e) => handleAttributeChange(e.target.value)}\r\n                className=\"search-select\"\r\n            >\r\n                {Object.entries(validAttributes).map(([key, attr]) => (\r\n                    <option key={key} value={key}>\r\n                        {attr.display}\r\n                    </option>\r\n                ))}\r\n            </select>\r\n\r\n            <select \r\n                value={searchTerm}\r\n                onChange={(e) => handleSearchChange(e.target.value)}\r\n                className=\"search-select\"\r\n            >\r\n                <option value=\"\">Select {validAttributes[searchAttribute].display}</option>\r\n                {validAttributes[searchAttribute].values.map(value => (\r\n                    <option key={value} value={value}>\r\n                        {value}\r\n                    </option>\r\n                ))}\r\n            </select>\r\n\r\n            <button type=\"submit\" className=\"search-button\">Search</button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default SearchForm;\r\n"],"names":["BASE_URL","process","MAPBOX_GEOCODING_URL","MAPBOX_TOKEN","useSearchForm","setProviders","setIsSearchedSubmitted","searchTerm","setSearchTerm","useState","searchAttribute","setSearchAttribute","validAttributes","practice_borough","display","values","primary_specialty","organization_type","handleAttributeChange","newAttribute","handleSearchChange","value","handleSubmit","async","e","preventDefault","providersData","params","$where","concat","$limit","console","log","response","axios","get","Promise","all","data","map","provider","practice_zip_code","geocodeResponse","access_token","limit","country","types","proximity","features","length","lng","lat","center","longitude","latitude","error","_error$response","fetchProviders","_ref","setIsSearchSubmitted","_jsxs","onSubmit","className","children","_jsx","onChange","target","Object","entries","_ref2","key","attr","type"],"sourceRoot":""}