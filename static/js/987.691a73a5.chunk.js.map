{"version":3,"file":"static/js/987.691a73a5.chunk.js","mappings":"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","sources":["services/providerService.js","hooks/useSearchForm.js","components/SearchForm.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst BASE_URL = process.env.REACT_APP_API_BASE_URL;\r\nconst MAPBOX_GEOCODING_URL = process.env.REACT_MAPBOX_GEOCODING_URL;\r\nconst MAPBOX_TOKEN = process.env.REACT_APP_MAPBOX_ACCESS_TOKEN;\r\n\r\nexport const fetchProviders = async (searchAttribute, searchTerm) => {\r\n  try {\r\n    if (!BASE_URL || !MAPBOX_GEOCODING_URL || !MAPBOX_TOKEN) {\r\n      console.error('Missing environment variables');\r\n      throw new Error('Configuration error');\r\n    }\r\n\r\n    const params = {\r\n      $where: `practice_borough='${searchTerm}'`,\r\n      $limit: 5\r\n    };\r\n\r\n    console.log('Fetching with params:', params);\r\n    const response = await axios.get(BASE_URL, { params });\r\n\r\n    const providersWithCoordinates = await Promise.all(\r\n      response.data.map(async (provider) => {\r\n        try {\r\n          if (provider.practice_zip_code) {\r\n            const geocodeResponse = await axios.get(\r\n              `${MAPBOX_GEOCODING_URL}/${provider.practice_zip_code}.json`,\r\n              {\r\n                params: {\r\n                  access_token: MAPBOX_TOKEN,\r\n                  limit: 1,\r\n                  country: \"US\",\r\n                  types: \"postcode\",\r\n                  proximity: \"-73.935242,40.730610\"\r\n                }\r\n              }\r\n            );\r\n\r\n            if (\r\n              geocodeResponse.data.features &&\r\n              geocodeResponse.data.features.length > 0\r\n            ) {\r\n              const [lng, lat] = geocodeResponse.data.features[0].center;\r\n              return {\r\n                ...provider,\r\n                longitude: lng,\r\n                latitude: lat\r\n              };\r\n            }\r\n          }\r\n          return provider;\r\n        } catch (error) {\r\n          console.error('Geocoding error:', error);\r\n          return provider;\r\n        }\r\n      })\r\n    );\r\n\r\n    return providersWithCoordinates;\r\n  } catch (error) {\r\n    console.error('Error details:', error.response?.data || error);\r\n    throw error;\r\n  }\r\n};\r\n","import { useState } from \"react\";\r\nimport { fetchProviders } from \"../services/providerService\";\r\n\r\nconst useSearchForm = (setProviders, setIsSearchedSubmitted) => {\r\n    const [searchTerm, setSearchTerm] = useState(\"\");\r\n    const [searchAttribute, setSearchAttribute] = useState(\"practice_borough\");\r\n\r\n    const validAttributes = {\r\n        practice_borough: {\r\n            display: \"Borough\",\r\n            values: [\"Bronx\", \"Manhattan\", \"Brooklyn\", \"Queens\", \"Staten Island\"]\r\n        },\r\n        primary_specialty: {\r\n            display: \"Specialty\",\r\n            values: [\"Internal Medicine\", \"Family Medicine\", \"Pediatrics\", \"OB/GYN\", \"Cardiology\", \"Primary Care\"]\r\n        },\r\n        organization_type: {\r\n            display: \"Organization Type\",\r\n            values: [\"Small Practice\", \"Group Practice\", \"Hospital\", \"Community Health Center\"]\r\n        }\r\n    };\r\n\r\n    const handleAttributeChange = (newAttribute) => {\r\n        setSearchAttribute(newAttribute);\r\n        setSearchTerm(\"\");\r\n    };\r\n\r\n    const handleSearchChange = (value) => {\r\n        setSearchTerm(value);\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        if (!searchTerm) return;\r\n\r\n        try {\r\n            const providersData = await fetchProviders(searchAttribute, searchTerm);\r\n            setProviders(providersData || []);\r\n            setIsSearchedSubmitted(true);\r\n        } catch (error) {\r\n            console.error(\"Error fetching providers:\", error);\r\n            setProviders([]);\r\n        }\r\n    };\r\n\r\n    return {\r\n        searchTerm,\r\n        searchAttribute,\r\n        validAttributes,\r\n        handleAttributeChange,\r\n        handleSearchChange,\r\n        handleSubmit,\r\n    };\r\n};\r\n\r\nexport default useSearchForm;","import React from 'react';\r\nimport useSearchForm from '../hooks/useSearchForm';\r\nimport './SearchForm.css';\r\n\r\nconst SearchForm = ({ setProviders, setIsSearchSubmitted }) => {\r\n    const {\r\n        searchTerm,\r\n        searchAttribute,\r\n        validAttributes,\r\n        handleAttributeChange,\r\n        handleSearchChange,\r\n        handleSubmit,\r\n    } = useSearchForm(setProviders, setIsSearchSubmitted);\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit} className=\"search-form\">\r\n            <select \r\n                value={searchAttribute}\r\n                onChange={(e) => handleAttributeChange(e.target.value)}\r\n                className=\"search-select\"\r\n            >\r\n                {Object.entries(validAttributes).map(([key, attr]) => (\r\n                    <option key={key} value={key}>\r\n                        {attr.display}\r\n                    </option>\r\n                ))}\r\n            </select>\r\n\r\n            <select \r\n                value={searchTerm}\r\n                onChange={(e) => handleSearchChange(e.target.value)}\r\n                className=\"search-select\"\r\n            >\r\n                <option value=\"\">Select {validAttributes[searchAttribute].display}</option>\r\n                {validAttributes[searchAttribute].values.map(value => (\r\n                    <option key={value} value={value}>\r\n                        {value}\r\n                    </option>\r\n                ))}\r\n            </select>\r\n\r\n            <button type=\"submit\" className=\"search-button\">Search</button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default SearchForm;\r\n"],"names":["BASE_URL","process","MAPBOX_GEOCODING_URL","REACT_MAPBOX_GEOCODING_URL","MAPBOX_TOKEN","useSearchForm","setProviders","setIsSearchedSubmitted","searchTerm","setSearchTerm","useState","searchAttribute","setSearchAttribute","validAttributes","practice_borough","display","values","primary_specialty","organization_type","handleAttributeChange","newAttribute","handleSearchChange","value","handleSubmit","async","e","preventDefault","providersData","console","error","Error","params","$where","concat","$limit","log","response","axios","get","Promise","all","data","map","provider","practice_zip_code","geocodeResponse","access_token","limit","country","types","proximity","features","length","lng","lat","center","longitude","latitude","_error$response","fetchProviders","_ref","setIsSearchSubmitted","_jsxs","onSubmit","className","children","_jsx","onChange","target","Object","entries","_ref2","key","attr","type"],"sourceRoot":""}